name: Produce Desktop Binary Builds
on:
  workflow_dispatch:
  push:
    branches:
      - tauri
      - feature/tauri
      #- master
      #- main

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: write

jobs:
  build:
    #defaults:
    #  run:
    #    working-directory: GUI/ETVR
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
        #, macos-latest
        #windows-latest,
        platform: [ubuntu-latest]
        #include:
        #- os: ubuntu-18.04
        #  rust_target: x86_64-unknown-linux-gnu
        #- os: windows-latest
        #  rust_target: x86_64-pc-windows-msvc
        #- os: macos-latest
        #  rust_target: x86_64-apple-darwin
        #- os: macos-latest
        #  rust_target: aarch64-apple-darwin
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}
      - name: Run Docker container
        if: matrix.platform == 'ubuntu-latest'
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/zanzythebar/tauridocker:latest
          options: -v ${{ github.workspace }}:/workspace
          run: |
            echo "::group::install node dependencies"
            npm install -g pnpm
            npm install -g typescript
            pnpm install
            echo "::group::tauri build"
            pnpm tauri build
            echo "::endgroup::"
      - name: Verify build
        run: |
          ls -la src-tauri/target/release/bundle/appimage
          ls -la src-tauri/target/release/bundle/deb

      - name: Node.js setup ${{ matrix.node-version }}
        if: matrix.platform == 'windows-latest' || matrix.platform == 'macos-latest'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          #cache: "pnpm"
          # node-version-file: '.nvmrc'

      - name: "Setup Rust"
        if: matrix.platform == 'windows-latest' || matrix.platform == 'macos-latest'
        uses: actions-rs/toolchain@v1
        with:
          default: true
          override: true
          profile: minimal
          toolchain: stable
          target: ${{ matrix.platform.rust_target }}

      - name: "Cache Rust"
        if: matrix.platform == 'windows-latest' || matrix.platform == 'macos-latest'
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      #- name: Install dependencies (ubuntu only)
      #  if: matrix.platform == 'ubuntu-latest'
      #  run: |
      #    sudo apt-get update
      #    sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
      #
      #- name: Install dependencies (PNPM)
      #  run: |
      #    npm install -g pnpm
      #    npm install -g typescript
      #    pnpm install

      - name: Build the app
        if: matrix.platform == 'windows-latest' || matrix.platform == 'macos-latest'
        uses: JonasKruckenberg/tauri-build@v1.2.3
        id: tauri_build
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ env.APPLE_CERTIFICATE }}
          #APPLE_CERTIFICATE: ${{ env.APPLE_CERTIFICATE }}
          #APPLE_CERTIFICATE_PASSWORD: ${{ env.APPLE_CERTIFICATE_PASSWORD }}
          #APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
          #APPLE_ID: ${{ env.APPLE_ID }}
          #APPLE_PASSWORD: ${{ env.APPLE_PASSWORD }}
        with:
          target: ${{ matrix.platform.rust_target }}

      - name: Archive Tauri Artifacts
        if: matrix.platform == 'windows-latest' || matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: production-files
          path: "${{ join(fromJSON(steps.tauri_build.outputs.artifacts), '\n') }}"

      - name: Archive Software Binaries
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-software
          #path: "./ESP/.pio/build/${{ matrix.target_name }}${{ matrix.target_build_type }}/${{ env.FIRMWARE_NAME }}.bin"
          path: "src-tauri/target/release/bundle/**/*.{deb,AppImage}"

          retention-days: 5
          if-no-files-found: error

      #- name: Build the app
      #  uses: tauri-apps/tauri-action@v0
      #  env:
      #    GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      #    TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
      #    TAURI_KEY_PASSWORD: ${{ env.TAURI_KEY_PASSWORD }}
      #  with:
      #    # tauri-action replaces \_\_VERSION\_\_ with the app version
      #    tagName: eyetrackvr-v__VERSION__
      #    releaseName: "EyeTrackApp v__VERSION__" # name of the release
      #    releaseBody: "See the assets to download this version and install." # message to include in the release
      #    releaseDraft: true # set to false to publish the release as a finished product
      #    prerelease: false # set to true to mark the release as a pre-release

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create Directory
        run: mkdir -p dist
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./dist
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install -g conventional-changelog-conventionalcommits
      - run: npm install -g semantic-release@v21.0.2
      - run: npm install -g @semantic-release/exec
      - run: npm install -g @semantic-release/git
      - run: npm install -g @semantic-release/release-notes-generator
      - run: npm install -g @semantic-release/changelog
      - run: npm install -g @semantic-release/github
      - name: Release
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        run: |
          sudo apt-get install -y jq
          chmod +x ./scripts/prepareCMD.sh 
          semantic-release

  cleanup:
    name: Cleanup actions
    needs:
      - deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: production-files
